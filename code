import csv
import os
import pandas as pd
from datetime import datetime


# General Transaction class (parent) with attributes including transaction_id, name, date
class Transaction:
    def __init__(self, transaction_id, name, amount, date, category):
        self.transaction_id = transaction_id
        self.name = name
        self.amount = amount
        self.date = date
        self.category = category

    def update_txn(self, name=None, amount=None, date=None):
        # This method updates the specific attributes of transaction if values are provided
        if name:
            self.name = name
        if amount:
            self.amount = amount
        if date:
            self.date = datetime.strptime(date, "%Y-%m-%d")

    def to_dict(self):
        #This method converts Transaction object into a dictionary
        return {
            "Transaction ID": self.transaction_id,
            "Title": self.name,
            "Cost": self.amount,
            "Date": self.date,
            "Category": self.category
        }

#Subclass for the Transaction class specifically for meals and its attributes.
class MealTransaction(Transaction):
    def __init__(self, transaction_id, name, amount, date, meal_type, place, cuisine):
        super().__init__(transaction_id, name, amount, date, "food")
        self.meal_type = meal_type
        self.place = place
        self.cuisine = cuisine

    def update_txn(self, meal_type=None, place=None, cuisine=None, **kwargs):
        #Update both child and parent class attributes if values are provided
        super().update_txn(**kwargs)

        if meal_type:
            self.meal_type = meal_type
        if place:
            self.place = place
        if cuisine:
            self.cuisine = cuisine

    def to_dict(self):
        #meal attributes are included in a dictionary
        my_dict = super().to_dict()
        my_dict.update({"Meal Type": self.meal_type, "Place": self.place, "Cuisine": self.cuisine})
        return my_dict

#Subclass for the Transaction class specifically for travel and its attributes.
class TravelTransaction(Transaction):
    def __init__(self, transaction_id, name, amount, date, destination, travel_mode, accommodation):
        super().__init__(transaction_id, name, amount, date, "travel")
        self.destination = destination
        self.travel_mode = travel_mode
        self.accommodation = accommodation

    def update_txn(self, destination=None, travel_mode=None, accommodation=None, **kwargs):
        ##Update both child and parent class attributes if values are provided
        super().update_txn(**kwargs)
        if destination:
            self.destination = destination
        if travel_mode:
            self.travel_mode = travel_mode
        if accommodation:
            self.accommodation = accommodation

    def to_dict(self):
        #travel attributes are included in a dictionary
        my_dict = super().to_dict()
        my_dict.update({"Destination": self.destination, "Travel Mode": self.travel_mode, "Accommodation": self.accommodation})
        return my_dict

#Access the file to perform operations and save and load the transactions
class TransactionsLookUp:
    def __init__(self):
        self.file_name = "transactions.csv"
        if not os.path.exists(self.file_name):  # This line checks to see if the file exists
            self.create_empty_csv()  # This line creates an empty CSV file to store transactions 
        self.transactions = self.convert_files_to_objects()

    def create_empty_csv(self): 
        #This method adds headers within the CSV file
        headers = [
                "Transaction ID", "Title", "Cost", "Date", "Category",
                "Meal Type", "Place", "Cuisine", "Destination", "Travel Mode", "Accommodation"
            ]
        df = pd.DataFrame(columns=headers)  # This line creates an empty DataFrame with headers
        df.to_csv(self.file_name, index=False)  # This line saves the empty DataFrame as CSV
        

    def convert_files_to_objects(self):
        transactions = [] # Create an empty list to store transactions
        #Open the CSV file to read
        with open(self.file_name, mode='r', newline='') as file:
            reader = csv.DictReader(file)  #This line reads each row as a dictionary
            #Loop through each row in the file
            for row in reader:
                #Retrieves each piece of information from the row, or default to the quotes if nothing is found
                category = row.get("Category", "")
                meal_type = row.get("Meal Type", "")
                place = row.get("Place", "")
                cuisine = row.get("Cuisine", "")
                destination = row.get("Destination", "")
                travel_mode = row.get("Travel Mode", "")
                accommodation = row.get("Accommodation", "")

                #Create a specific object based on the category
                if category == "food":
                #If the category is "food", create a MealTransaction object
                    transaction = MealTransaction(
                        row["Transaction ID"], row["Title"], float(row["Cost"]),
                        row["Date"], meal_type, place, cuisine
                    )
                elif category == "travel":
                    #If the category is "travel", create a TravelTransaction object
                    transaction = TravelTransaction(
                        row["Transaction ID"], row["Title"], float(row["Cost"]),
                        row["Date"], destination, travel_mode, accommodation
                    )
                else:
                #For all other categories, create a generic Transaction object
                    transaction = Transaction(
                        row["Transaction ID"], row["Title"], float(row["Cost"]),
                        row["Date"], category
                    )
                transactions.append(transaction)
                #Using the append, the transaction is added to the list
            return transactions


    def append_transaction(self, transaction):
        #Add a new transaction to the list and save it to the file
        self.transactions.append(transaction)
        self.write_to_file()

    def write_to_file(self):
        #Save all transactions to the CSV file
        with open(self.file_name, mode='w', newline='') as file:
            fieldnames = ["Transaction ID", "Title", "Cost", "Date", "Category",
                          "Meal Type", "Place", "Cuisine", "Destination", "Travel Mode", "Accommodation"]
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()#Write row header
            for txn in self.transactions:
                writer.writerow(txn.to_dict())
    #This is a method filter transactions by start and end date
    def filter_transactions(self, start_date, end_date, category=None):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")
        filtered = []
        for txn in self.transactions:
            if start_date <= datetime.strptime(txn.date, "%Y-%m-%d") <= end_date and (
                    category is None or txn.category == category):
                filtered.append(txn)
        return filtered
    #This method updates details based on the what transaction ID the user inputs
    def update_transaction(self, transaction_id):
        for txn in self.transactions:
            if txn.transaction_id == transaction_id:
                print("Found the transaction:")
                print(txn.to_dict())#Coverts transaction object to a dictionary to be readable
                name = input("Enter new name for the transaction or leave blank for existing name: ").strip()
                amount = input("Enter new amount for the transaction or leave blank for existing amount: ").strip()
                date = input("Enter new date for the transaction or leave blank for existing date: ").strip()
                #If no new values are given by the user then the old values will be continued
                txn.update_txn(name=name or None, amount=amount or None, date=date or None)

                if isinstance(txn, MealTransaction):
                    # Prompts the user to enter information for the MealTransaction attributes
                    meal_type = input(
                        "Enter new meal_type for the transaction or leave blank for existing meal_type: ").strip()
                    place = input("Enter new place for the transaction or leave blank for existing place: ").strip()
                    cuisine = input("Enter new cuisine (leave blank to skip): ").strip()
                    txn.update_txn(meal_type=meal_type or None, place=place or None, cuisine=cuisine or None)

                if isinstance(txn, TravelTransaction):
                    # Prompts the user to enter information for the TravelTransaction attributes
                    destination = input(
                        "Enter new destination for the transaction or leave blank for existing destination: ").strip()
                    travel_mode = input(
                        "Enter new travel_mode for the transaction or leave blank for existing travel_mode: ").strip()
                    accommodation = input("Enter new accommodation (leave blank to skip): ").strip()
                    txn.update_txn(destination=destination or None, travel_mode=travel_mode or None, accommodation=accommodation or None)
                self.write_to_file()
                #Saves the transactions to the CSV file
                print("Written to file")
                return
        print("No matching transaction_id")
    def show_statistics(self, start_date=None, end_date=None):
        # Given a date range this method will display statistics about their given transactions
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")
        filtered = [
            tx for tx in self.transactions
            if start_date <= datetime.strptime(tx.date, "%Y-%m-%d") <= end_date
        ]

        if not filtered:
            #if no transactions are found within the date range, the method exists
            print("No transactions found for the specified date range.")
            return

        total_spent = sum(tx.amount for tx in filtered) #Calculate total amount spend on given transactions
        unique_dates = set(tx.date for tx in filtered)  # Get unique transaction dates
        num_days = len(unique_dates)  # Count unique dates

        if num_days > 0: #Calculates the average spending for given transactions
            daily_avg = total_spent / num_days
        else:
            daily_avg = 0 #Default value is zero
        #Calculates the min and max values of the given transaction
        min_transaction = min(filtered, key=lambda tx: tx.amount)
        max_transaction = max(filtered, key=lambda tx: tx.amount)
        #Displays details of all the transaction given
        print("\n--- General Statistics ---")
        print(f"Total spent: {total_spent:.2f}")
        print(f"Daily average spending: {daily_avg:.2f}")
        print(
            f"Minimum transaction: {min_transaction.amount:.2f} (ID: {min_transaction.transaction_id}, Name: {min_transaction.name})")
        print(
            f"Maximum transaction: {max_transaction.amount:.2f} (ID: {max_transaction.transaction_id}, Name: {max_transaction.name})")
        #Filters transaction specifically for meals
        meal_transactions = [tx for tx in filtered if isinstance(tx, MealTransaction)]
        if meal_transactions:
            #If a meal transaction is found, these stats are displayed
            meal_total = sum(tx.amount for tx in meal_transactions)
            meal_count = len(meal_transactions)
            print("\n--- Meal Transactions ---")
            print(f"Total spent on meals: {meal_total:.2f}")
            print(f"Average per meal transaction: {meal_total / meal_count:.2f}")
        # Filters transaction specifically for travel
        travel_transactions = [tx for tx in filtered if isinstance(tx, TravelTransaction)]
        if travel_transactions:
            # If a travel transaction is found, these stats are displayed
            travel_total = sum(tx.amount for tx in travel_transactions)
            travel_count = len(travel_transactions)
            print("\n--- Travel Transactions ---")
            print(f"Total spent on travel: {travel_total:.2f}")
            print(f"Average per travel transaction: {travel_total / travel_count:.2f}")

#
if __name__ == "__main__":
    manager = TransactionsLookUp()#This create a instance of the TransactionsLookUp class
#Asking the user to input their choice and the strip method is there
    # to remove space and move forward with the user input
    while True:
        print("\nOptions:")
        print("1. Add Transaction")
        print("2. View Transactions")
        print("3. Modify Transaction")
        print("4. Display Statistics")
        print("5. Quit")
        choice = input("Enter your choice: ").strip()

        #If user inputs 1, they add their respective transaction
        if choice == "1":
            category = input("Enter category (food/travel/other): ").strip().lower()
            name = input("Enter name: ").strip()
            amount = float(input("Enter amount: ").strip())#The amount can be a decimal value
            transaction_id = input("Enter transaction ID: ").strip()
            while True:
                try:
                    #Validates a proper format of the date
                    date = input("Enter date (YYYY-MM-DD): ").strip()
                    datetime.strptime(date, "%Y-%m-%d")
                    break
                except ValueError:
                    print("This input is invalid. Please enter in YYYY-MM-DD format")

            if category == "food":
                #Creates a specific transaction based on the category the user inputs
                meal_type = input("Enter meal type: ").strip()
                place = input("Enter place: ").strip()
                cuisine = input("Enter cuisine: ").strip()
                txn = MealTransaction(transaction_id, name, amount, date, meal_type, place, cuisine)
            elif category == "travel":
                # Creates a specific transaction based on the category the user inputs
                destination = input("Enter destination: ").strip()
                travel_mode = input("Enter travel mode: ").strip()
                accommodation = input("Enter accommodation: ").strip()
                txn = TravelTransaction(transaction_id, name, amount, date, destination, travel_mode, accommodation)
            else:
                txn = Transaction(transaction_id, name, amount, date, category)

            manager.append_transaction(txn)#This line updates the CSV file with the transactions

        elif choice == "2":
            #This displays all the transactions in a dictionary
            for txn in manager.transactions:
                print(txn.to_dict())

        elif choice == "3":
            #If user has any changes to their transactions, they change it here
           try:
                transaction_id = input("Enter the transaction ID to modify: ").strip()
                manager.update_transaction(transaction_id)
                break
           except ValueError:
               print("This input is not valid. Try again.")


        elif choice == "4":
            #Displays the transaction stats based on the specific date range
            # Validate start date and only executes the end date once the start date is valid
            while True:
                try:
                    start_date = input("Enter start date (YYYY-MM-DD): ").strip()
                    datetime.strptime(start_date, "%Y-%m-%d")  # Validate start date
                    break  # Exit this loop once start date is valid
                except ValueError:
                    print("This input is invalid. Please enter the start date in YYYY-MM-DD format.")

            # Validate end date only after start date is valid
            while True:
                try:
                    end_date = input("Enter end date (YYYY-MM-DD): ").strip()
                    datetime.strptime(end_date, "%Y-%m-%d")  # Validate end date
                    break  # Exit this loop once end date is valid
                except ValueError:
                    print("This input is invalid. Please enter the end date in YYYY-MM-DD format.")

            # Once both dates are valid, proceed
            manager.show_statistics(start_date, end_date)


        elif choice == '5':
            #User can press if they wish to exit the program
            print("You have chose to quit. ")
            break
        else:
            #Any other choice besides the 5 given, prints this message
            print("Invalid choice please try again")
